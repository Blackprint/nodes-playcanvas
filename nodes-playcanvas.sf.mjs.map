{"version":3,"names":["window","templates","_$_","sf","dom","$","__tmplt","_sf_internal","body_map","_replace","h","html","this","path","remove","reinitViews","append","prepend","Blackprint","loadScope","url","loader","task","Context","getContext","IFace","init","super"],"sources":["src/_init.sf","src/Application/Canvas.sf"],"sourcesContent":[".js will run first before .sf\n\n## js-global\n// This script will run first, and then the other .sf files\n// depends on blackprint.config.js configuration\n\n// Prepare stuff when the page is loading\n\n// Because .js and .sf is separated\n// we also need to call LoadScope just like _init.js\nlet Blackprint = window.Blackprint.loadScope({\n\t// You can find the URL on Blackprint menu -> Modules\n\t// This will also be exported to JSON if this module's nodes is being used\n\turl: import.meta.url,\n});\n\n// Use sQuery\nlet $ = sf.$;\n\n// Wait until all module has been loaded before load .sf files\nawait sf.loader.task;\n\n// Global shared context (wait it to avoid race condition)\nlet Context = await Blackprint.getContext('PlayCanvas');\n\n// Context.EventSlot => shared from \"_init.js\"","## html\n<div class=\"node your-class\" style=\"transform: translate({{ x }}px, {{ y }}px)\">\n  <sf-template path=\"Blackprint/nodes/template/routes.sf\"></sf-template>\n  <sf-template path=\"Blackprint/nodes/template/header.sf\"></sf-template>\n\n  <div class=\"content\">\n    <div class=\"left-port\">\n      <sf-template path=\"Blackprint/nodes/template/input-port.sf\"></sf-template>\n    </div>\n\n    <div class=\"right-port\">\n      <sf-template path=\"Blackprint/nodes/template/output-port.sf\"></sf-template>\n    </div>\n  </div>\n\n  <sf-template path=\"Blackprint/nodes/template/other.sf\"></sf-template>\n</div>\n\n## scss-global\nbpic-playcanvas-application-canvas { // Element name based on file path\n  canvas {\n    display: block;\n    border-bottom: 1px dashed white;\n    margin-bottom: 2px;\n  }\n}\n\n## js-global\nBlackprint.Sketch.registerInterface('BPIC/PlayCanvas/Application/Canvas',\nclass extends Context.IFace[\"Application/Canvas\"] {\n  // this == iface\n\n  init(el){\n    $(this.canvas).insertBefore(this.$el('.left-port')[0]);\n    super.init();\n\n    // window.addEventListener(\"resize\", function () {\n    //   engine.resize();\n    // });\n  }\n});"],"mappings":"8HAEAA,EAAAC,YAAAD,EAAAC,UAAA,QAAAC,EAAAC,GAAAC,KAAAD,GAAAE,EAAAC,EAAAN,EAAAC,UAAAD,EAAAO,aAAAP,EAAAO,cAAA,CAAAC,YAAAC,cAAA,IAAAC,EAAAR,EAAAS,GAAA,OAAAC,KAAAJ,SAAAK,IAAAD,KAAAJ,SAAAK,GAAAC,SAAAF,KAAAG,aAAAH,KAAAG,YAAAL,GAAAE,KAAAJ,SAAAK,GAAAH,CAAA,EAAAM,YAAAd,4DAAA,EAAAe,aAAAf,6DAAA,GAOA,IAAAgB,EAAAlB,EAAAkB,WAAAC,UAAA,CAGAC,sBAIAf,EAAAF,GAAAE,QAGAF,GAAAkB,OAAAC,KAGA,IAAAC,QAAAL,EAAAM,WAAA,c,4jBCMAN,gEACA,cAAAK,EAAAE,MAAA,sBAGAC,QACArB,uDACAsB,MAAAD,MAKA,G"}