/* MIT Licensed */
{
  "version": 3,
  "sources": ["bp-plugins:@_bp_internal", "bp-plugins:@blackprint/engine", "src/_context.ts", "bp-plugins:@blackprint/sketch", "bp-plugins:playcanvas", "src/Application/Canvas.ts", "src/Data/Vec2/Create.ts", "src/Data/Vec3/Create.ts", "src/Data/Vec4/Create.ts", "src/Entity/RigidBody/ApplyForce.ts", "src/Entity/RigidBody/ApplyImpulse.ts", "src/Entity/RigidBody/ApplyTorque.ts", "src/Math/Vector/ClampLength.ts", "src/Math/Vector/Lerp.ts", "src/utils/NodeToast.ts", "src/Math/Vector/Rotate.ts", "src/Scene/Box.ts", "src/Scene/Camera.ts", "src/Scene/Get/Entity.ts", "src/Scene/Light.ts"],
  "sourcesContent": ["\n\t\t\t\t\t\t\t\texport let Blackprint = globalThis.Blackprint.loadScope({\n\t\t\t\t\t\t\t\t\turl: import.meta.url,\n\t\t\t\t\t\t\t\t\thasInterface: true,\n\t\t\t\t\t\t\t\t\thasDocs: true,\n\t\t\t\t\t\t\t\t}) as typeof import(\"@blackprint/engine\");\n\n\t\t\t\t\t\t\t\tlet sf = globalThis.sf;\n\t\t\t\t\t\t\t\texport async function _imports_(moduleName: string, url: string){\n\t\t\t\t\t\t\t\t\tlet loadFromURL = globalThis.Blackprint.Environment.loadFromURL;\n\t\t\t\t\t\t\t\t\tif(loadFromURL && sf?.loader != null){\n\t\t\t\t\t\t\t\t\t\treturn (await sf.loader.mjs([url]))[0];\n\t\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t\t\treturn await import(loadFromURL ? url : moduleName);\n\t\t\t\t\t\t\t\t};", "\n\t\t\t\t\t\t\timport { Blackprint } from \"@_bp_internal\";\n\t\t\t\t\t\t\texport default Blackprint;", "import Blackprint from \"@blackprint/engine\";\n\n// This is required for accessing data between .ts and .sf module\nexport let Context = Blackprint.createContext(\"PlayCanvas\");\n\n// This is needed to avoid duplicated event listener when using hot reload\n// Event listener that registered with same slot will be replaced\nContext.EventSlot = {slot: 'my-private-event-slot'};", "\n\t\t\t\t\t\t\timport { Blackprint } from \"@_bp_internal\";\n\t\t\t\t\t\t\texport default Blackprint;", "\n\t\t\t\t\t\t\timport { _imports_ } from \"@_bp_internal\";\n\t\t\t\t\t\t\tlet globall = typeof window !== 'undefined' ? window : globalThis;\n\t\t\t\t\t\t\texport default (globall[\"PlayCanvas\"] || await _imports_(\"playcanvas\", \"https://cdn.jsdelivr.net/npm/playcanvas@1.x/build/playcanvas.mjs\"));", "import { Context } from \"_context\";\nimport Blackprint from \"@blackprint/sketch\";\nimport PlayCanvas from \"playcanvas\";\n\n/**\n * PlayCanvas Application\n * @blackprint node\n */\n@Blackprint.registerNode(\"PlayCanvas/Application/Canvas\")\nexport class Node extends Blackprint.Node<typeof Node> {\n\tstatic input = {\n\t\t/** PlayCanvas's entities */\n\t\tChild: Blackprint.Port.ArrayOf(PlayCanvas.Entity),\n\t}\n\n\tstatic output = {\n\t\t/** PlayCanvas's instance */\n\t\tInstance: PlayCanvas.Application,\n\t\t/** PlayCanvas's canvas for displaying scenes */\n\t\tCanvas: HTMLCanvasElement,\n\t}\n\n\tconstructor(instance: Blackprint.Engine){\n\t\tsuper(instance);\n\n\t\tlet iface = this.setInterface(\"BPIC/PlayCanvas/Application/Canvas\");\n\t\tiface.title = \"Canvas\";\n\t}\n}\n\n@Blackprint.registerInterface(\"BPIC/PlayCanvas/Application/Canvas\")\nexport class Interface extends Blackprint.Interface<Node> {\n\tconstructor(node: Node){\n\t\tsuper(node);\n\n\t\tlet canvas = this.canvas = document.createElement('canvas');\n\t\tcanvas.style.touchAction = \"none\";\n\n\t\tcanvas.width = 360;\n\t\tcanvas.height = 240;\n\t}\n\n\tinit(){\n\t\tthis.input.Child.on('value', ev => {\n\t\t\tthis.ref.Output.Instance.root.addChild(ev.cable.value);\n\t\t});\n\t\tthis.input.Child.on('disconnect', ev => {\n\t\t\tthis.ref.Output.Instance.root.removeChild(ev.target.value);\n\t\t});\n\t}\n\n\timported(){\n\t\tlet Output = this.ref.Output;\n\n\t\tOutput.Canvas = this.canvas;\n\t\tOutput.Instance = new PlayCanvas.Application(Output.Canvas, {});\n\t\tOutput.Instance.start();\n\t}\n\n\tdestroy(){\n\t\tthis.ref.Output.Instance.destroy();\n\t}\n}\n\n// Make sure to save it to the Context, so we can access it from .sf extension\nContext.IFace[\"Application/Canvas\"] = Interface;", "import Blackprint from \"@blackprint/sketch\";\nimport PlayCanvas from \"playcanvas\";\n\n/**\n * Create 2-dimensional vector (X, Y)\n * @summary PlayCanvas\n * @blackprint node\n */\n@Blackprint.registerNode(\"PlayCanvas/Data/Vec2/Create\")\nexport class Node extends Blackprint.Node<typeof Node> {\n\tstatic input = {\n\t\tX: Blackprint.Port.Default(Number, 0),\n\t\tY: Blackprint.Port.Default(Number, 0),\n\t};\n\tstatic output = {\n\t\tData: PlayCanvas.Vec2,\n\t};\n\n\tconstructor(instance: Blackprint.Engine){\n\t\tsuper(instance);\n\n\t\tlet iface = this.setInterface();\n\t\tiface.title = \"Create Vec2\";\n\t}\n\n\tupdate() {\n\t\tlet { Input, Output } = this.ref;\n\t\tOutput.Data = new PlayCanvas.Vec2(Input.X, Input.Y);\n\t}\n}", "import Blackprint from \"@blackprint/sketch\";\nimport PlayCanvas from \"playcanvas\";\n\n/**\n * Create 3-dimensional vector (X, Y, Z)\n * @summary PlayCanvas\n * @blackprint node\n */\n@Blackprint.registerNode(\"PlayCanvas/Data/Vec3/Create\")\nexport class Node extends Blackprint.Node<typeof Node> {\n\tstatic input = {\n\t\tX: Blackprint.Port.Default(Number, 0),\n\t\tY: Blackprint.Port.Default(Number, 0),\n\t\tZ: Blackprint.Port.Default(Number, 0),\n\t};\n\tstatic output = {\n\t\tData: PlayCanvas.Vec3,\n\t};\n\n\tconstructor(instance: Blackprint.Engine){\n\t\tsuper(instance);\n\n\t\tlet iface = this.setInterface();\n\t\tiface.title = \"Create Vec3\";\n\t}\n\n\tupdate() {\n\t\tlet { Input, Output } = this.ref;\n\t\tOutput.Data = new PlayCanvas.Vec3(Input.X, Input.Y, Input.Z);\n\t}\n}", "import Blackprint from \"@blackprint/sketch\";\nimport PlayCanvas from \"playcanvas\";\n\n/**\n * Create 4-dimensional vector (W, X, Y, Z)\n * @summary PlayCanvas\n * @blackprint node\n */\n@Blackprint.registerNode(\"PlayCanvas/Data/Vec4/Create\")\nexport class Node extends Blackprint.Node<typeof Node> {\n\tstatic input = {\n\t\tW: Blackprint.Port.Default(Number, 0),\n\t\tX: Blackprint.Port.Default(Number, 0),\n\t\tY: Blackprint.Port.Default(Number, 0),\n\t\tZ: Blackprint.Port.Default(Number, 0),\n\t};\n\tstatic output = {\n\t\tData: PlayCanvas.Vec4,\n\t};\n\n\tconstructor(instance: Blackprint.Engine){\n\t\tsuper(instance);\n\n\t\tlet iface = this.setInterface();\n\t\tiface.title = \"Create Vec4\";\n\t}\n\n\tupdate() {\n\t\tlet { Input, Output } = this.ref;\n\t\tOutput.Data = new PlayCanvas.Vec4(Input.W, Input.X, Input.Y, Input.Z);\n\t}\n}", "import Blackprint from \"@blackprint/sketch\";\nimport PlayCanvas from \"playcanvas\";\n\n/**\n * Apply force to an entity\n * @summary PlayCanvas\n * @blackprint node\n */\n@Blackprint.registerNode(\"PlayCanvas/Entity/RigidBody/ApplyForce\")\nexport class Node extends Blackprint.Node<typeof Node> {\n\tstatic input = {\n\t\t/** Entity to apply the force into */\n\t\tEntity: Blackprint.Port.Union([PlayCanvas.GraphNode, PlayCanvas.Entity]),\n\t\t/** Force's vector (x,y,z) */\n\t\tVec3: PlayCanvas.Vec3,\n\t};\n\n\tconstructor(instance: Blackprint.Engine){\n\t\tsuper(instance);\n\n\t\tlet iface = this.setInterface();\n\t\tiface.title = \"Apply Force\";\n\t}\n\n\tupdate() {\n\t\tlet { Input } = this.ref;\n\t\tif(!Input.Entity || !Input.Vec3) return;\n\n\t\t// Type cast for TypeScript\n\t\tlet entity = Input.Entity as PlayCanvas.Entity;\n\t\tentity.rigidbody.applyForce(Input.Vec3);\n\t}\n}", "import Blackprint from \"@blackprint/sketch\";\nimport PlayCanvas from \"playcanvas\";\n\n/**\n * Apply impulse to an entity\n * @summary PlayCanvas\n * @blackprint node\n */\n@Blackprint.registerNode(\"PlayCanvas/Entity/RigidBody/ApplyImpulse\")\nexport class Node extends Blackprint.Node<typeof Node> {\n\tstatic input = {\n\t\t/** Entity to apply the impulse into */\n\t\tEntity: Blackprint.Port.Union([PlayCanvas.GraphNode, PlayCanvas.Entity]),\n\t\t/** Impulse's vector (x,y,z) */\n\t\tVec3: PlayCanvas.Vec3,\n\t};\n\n\tconstructor(instance: Blackprint.Engine){\n\t\tsuper(instance);\n\n\t\tlet iface = this.setInterface();\n\t\tiface.title = \"Apply Impulse\";\n\t}\n\n\tupdate() {\n\t\tlet { Input } = this.ref;\n\t\tif(!Input.Entity || !Input.Vec3) return;\n\n\t\t// Type cast for TypeScript\n\t\tlet entity = Input.Entity as PlayCanvas.Entity;\n\t\tentity.rigidbody.applyImpulse(Input.Vec3);\n\t}\n}", "import Blackprint from \"@blackprint/sketch\";\nimport PlayCanvas from \"playcanvas\";\n\n/**\n * Apply torque to an entity\n * @summary PlayCanvas\n * @blackprint node\n */\n@Blackprint.registerNode(\"PlayCanvas/Entity/RigidBody/ApplyTorque\")\nexport class Node extends Blackprint.Node<typeof Node> {\n\tstatic input = {\n\t\t/** Entity to apply the torque into */\n\t\tEntity: Blackprint.Port.Union([PlayCanvas.GraphNode, PlayCanvas.Entity]),\n\t\t/** Torque's vector (x,y,z) */\n\t\tVec3: PlayCanvas.Vec3,\n\t};\n\n\tconstructor(instance: Blackprint.Engine){\n\t\tsuper(instance);\n\n\t\tlet iface = this.setInterface();\n\t\tiface.title = \"Apply Torque\";\n\t}\n\n\tupdate() {\n\t\tlet { Input } = this.ref;\n\t\tif(!Input.Entity || !Input.Vec3) return;\n\n\t\t// Type cast for TypeScript\n\t\tlet entity = Input.Entity as PlayCanvas.Entity;\n\t\tentity.rigidbody.applyTorque(Input.Vec3);\n\t}\n}", "import Blackprint from \"@blackprint/sketch\";\nimport PlayCanvas from \"playcanvas\";\n\n/**\n * Clamp vector length\n * @summary PlayCanvas\n * @blackprint node\n */\n@Blackprint.registerNode(\"PlayCanvas/Math/Vector/ClampLength\")\nexport class Node extends Blackprint.Node<typeof Node> {\n\tstatic input = {\n\t\tVector: Blackprint.Port.Union([PlayCanvas.Vec2, PlayCanvas.Vec3, PlayCanvas.Vec4]),\n\t\tMax: Blackprint.Port.Default(Number, 10),\n\t};\n\tstatic output = {\n\t\tOut: Blackprint.Port.Union([PlayCanvas.Vec2, PlayCanvas.Vec3, PlayCanvas.Vec4]),\n\t};\n\n\tconstructor(instance: Blackprint.Engine){\n\t\tsuper(instance);\n\n\t\tlet iface = this.setInterface();\n\t\tiface.title = \"Clamp Length\";\n\t}\n\n\tupdate() {\n\t\tlet { Input, Output } = this.ref;\n\t\tlet { Vector, Max } = Input;\n\t\tif(!Vector) return;\n\n\t\tVector = Vector.clone();\n        if(Vector.length() > Max)\n            Vector.normalize().scale(Max);\n\n\t\tOutput.Out = Vector;\n\t}\n}", "import Blackprint from \"@blackprint/sketch\";\nimport PlayCanvas from \"playcanvas\";\n\n/**\n * Gradually change vector value between two points\n * @summary PlayCanvas\n * @blackprint node\n */\n@Blackprint.registerNode(\"PlayCanvas/Math/Vector/Lerp\")\nexport class Node extends Blackprint.Node<typeof Node> {\n\tstatic input = {\n\t\tVector: Blackprint.Port.Union([PlayCanvas.Vec2, PlayCanvas.Vec3, PlayCanvas.Vec4]),\n\t\tTarget: Blackprint.Port.Union([PlayCanvas.Vec2, PlayCanvas.Vec3, PlayCanvas.Vec4]),\n\t\tAlpha: Blackprint.Port.Default(Number, 0.1),\n\t};\n\tstatic output = {\n\t\tOut: Blackprint.Port.Union([PlayCanvas.Vec2, PlayCanvas.Vec3, PlayCanvas.Vec4]),\n\t};\n\n\tconstructor(instance: Blackprint.Engine){\n\t\tsuper(instance);\n\n\t\tlet iface = this.setInterface();\n\t\tiface.title = \"Lerp\";\n\t}\n\n\tupdate() {\n\t\tlet { Input, Output } = this.ref;\n\t\tlet { Vector, Target, Alpha } = Input;\n\t\tif(!Vector || !Target) return;\n\n\t\tlet temp = Vector.clone();\n\t\ttemp.lerp(Vector, Target, Alpha);\n\n\t\tOutput.Out = temp;\n\t}\n}", "import Blackprint from \"@blackprint/engine\";\nimport { Context } from \"_context\";\n\n// Bootstrap for add toast on node decoration\nexport class NodeToast { // eslint-disable-line\n\tdeclare iface: Blackprint.Interface;\n\tdeclare haveInfo: any;\n\tdeclare haveWarn: any;\n\tdeclare haveError: any;\n\n\tconstructor(iface: Blackprint.Interface){\n\t\tthis.iface = iface;\n\t}\n\n\tclear(){\n\t\tif(this.haveInfo){\n\t\t\tthis.haveInfo.destroy();\n\t\t\tthis.haveInfo = false;\n\t\t}\n\t\tif(this.haveWarn){\n\t\t\tthis.haveWarn.destroy();\n\t\t\tthis.haveWarn = false;\n\t\t}\n\t\tif(this.haveError){\n\t\t\tthis.haveError.destroy();\n\t\t\tthis.haveError = false;\n\t\t}\n\t}\n\n\t_reduceText(text: String){\n\t\treturn text.replace(/\\w{15,}/g, full => full.slice(0, 5)+'...');\n\t}\n\n\tinfo(text: String){\n\t\tif(!this.iface.$decoration) return;\n\t\tlet temp = text;\n\t\ttext = this._reduceText(text);\n\n\t\tif(this.haveInfo)\n\t\t\tthis.haveInfo.text = text;\n\t\telse\n\t\t\tthis.haveInfo = this.iface.$decoration.info(text);\n\n\t\tthis.haveInfo._raw = temp;\n\t}\n\n\twarn(text: String){\n\t\tif(!this.iface.$decoration) return;\n\t\tlet temp = text;\n\t\ttext = this._reduceText(text);\n\n\t\tif(this.haveWarn)\n\t\t\tthis.haveWarn.text = text;\n\t\telse\n\t\t\tthis.haveWarn = this.iface.$decoration.warn(text);\n\n\t\tthis.haveWarn._raw = temp;\n\t}\n\n\terror(text: String){\n\t\tif(!this.iface.$decoration) return;\n\t\tlet temp = text;\n\t\ttext = this._reduceText(text);\n\n\t\tif(this.haveError)\n\t\t\tthis.haveError.text = text;\n\t\telse\n\t\t\tthis.haveError = this.iface.$decoration.error(text);\n\n\t\tthis.haveError._raw = temp;\n\t}\n\n\tsuccess(text: String){\n\t\tif(!this.iface.$decoration) return;\n\t\tlet ref = this.iface.$decoration.success(this._reduceText(text));\n\t\tref._raw = text;\n\t}\n}\n\nContext.NodeToast = NodeToast;", "import Blackprint from \"@blackprint/sketch\";\nimport PlayCanvas from \"playcanvas\";\nimport { NodeToast } from \"utils/NodeToast\";\n\nlet toRadian = Math.PI/180;\n\n/**\n * Rotate a vector based on specified dimension component\n * @summary PlayCanvas\n * @blackprint node\n */\n@Blackprint.registerNode(\"PlayCanvas/Math/Vector/Rotate\")\nexport class Node extends Blackprint.Node<typeof Node> {\n\tstatic input = {\n\t\t/** Vector to be rotated */\n\t\tVector: Blackprint.Port.Union([PlayCanvas.Vec2, PlayCanvas.Vec3, PlayCanvas.Vec4]),\n\t\t/** The rotation is counter-clockwise, started from quadrant 1 */\n\t\tDegree: Blackprint.Port.Default(Number, 0),\n\t\t/**\n\t\t * Vector component that you want to rotate\n\t\t * @menu\n\t\t * - [XY]:(XY) = Based on XY\n\t\t * - [XZ]:(XZ) = Based on XZ\n\t\t * - [YZ]:(YZ) = Based on YZ\n\t\t */\n\t\tComponent: Blackprint.Port.Default(String, 'XY'),\n\t};\n\tstatic output = {\n\t\tOut: Blackprint.Port.Union([PlayCanvas.Vec2, PlayCanvas.Vec3, PlayCanvas.Vec4]),\n\t};\n\n\tconstructor(instance: Blackprint.Engine){\n\t\tsuper(instance);\n\n\t\tlet iface = this.setInterface();\n\t\tiface.title = \"Rotate Vector\";\n\t\tthis._toast = new NodeToast(iface);\n\t}\n\n\tupdate() {\n\t\tlet { Input, Output } = this.ref;\n\t\tlet vec = Input.Vector as PlayCanvas.Vec4;\n\t\tif(vec == null) return;\n\n\t\tvec = vec.clone();\n\n\t\tlet { Component, Degree } = Input;\n\t\tvar rX = Math.cos(toRadian * Degree);\n\t\tvar rY = Math.sin(toRadian * Degree);\n\n\t\tlet { x, y, z } = vec;\n\n\t\tif(Component === 'XY'){\n\t\t\tvec.x = x * rX - y * rY;\n\t\t\tvec.y = y * rX + x * rY;\n\t\t}\n\t\telse if(Component === 'XZ'){\n\t\t\tvec.x = x * rX - z * rY;\n\t\t\tvec.z = z * rX + x * rY;\n\t\t}\n\t\telse if(Component === 'YZ'){\n\t\t\tvec.y = y * rX - z * rY;\n\t\t\tvec.z = z * rX + y * rY;\n\t\t}\n\t\telse {\n\t\t\tthis._toast.error(`\"${Component}\" is not recognized`);\n\t\t\treturn;\n\t\t}\n\n\t\tthis._toast.clear();\n\t\tOutput.Out = vec;\n\t}\n}", "import Blackprint from \"@blackprint/sketch\";\nimport PlayCanvas from \"playcanvas\";\n\n/**\n * Create Box\n * @summary PlayCanvas\n * @blackprint node\n */\n@Blackprint.registerNode(\"PlayCanvas/Scene/Box\")\nexport class Node extends Blackprint.Node<typeof Node> {\n\tstatic output = {\n\t\tBox: PlayCanvas.Entity,\n\t};\n\n\tconstructor(instance: Blackprint.Engine){\n\t\tsuper(instance);\n\n\t\tlet iface = this.setInterface();\n\t\tiface.title = \"Box\";\n\t}\n\n\tinit(){\n\t\tlet temp = this.ref.Output.Box = new PlayCanvas.Entity();\n\n\t\tconst material = new PlayCanvas.StandardMaterial();\n\t\tmaterial.diffuse = PlayCanvas.Color.GRAY;\n\t\tmaterial.update();\n\n\t\ttemp.addComponent(\"render\", {\n\t\t\ttype: \"box\",\n\t\t\tmaterial: material,\n\t\t});\n\n\t\t// temp.setLocalScale(50, 1, 50);\n\t\t// temp.setLocalPosition(0, -0.5, 0);\n\t}\n}", "import Blackprint from \"@blackprint/sketch\";\nimport PlayCanvas from \"playcanvas\";\n\n/**\n * Create Camera\n * @summary PlayCanvas\n * @blackprint node\n */\n@Blackprint.registerNode(\"PlayCanvas/Scene/Camera\")\nexport class Node extends Blackprint.Node<typeof Node> {\n\tstatic input = {\n\t\t// ToDo: rotate, translate\n\t};\n\tstatic output = {\n\t\tCamera: PlayCanvas.Entity,\n\t};\n\n\tconstructor(instance: Blackprint.Engine){\n\t\tsuper(instance);\n\n\t\tlet iface = this.setInterface();\n\t\tiface.title = \"Camera\";\n\t}\n\n\tinit(){\n\t\tlet temp = this.ref.Output.Camera = new PlayCanvas.Entity();\n\n\t\ttemp.addComponent(\"camera\", {\n\t\t\tclearColor: new PlayCanvas.Color(0, 0, 0),\n\t\t});\n\n\t\ttemp.rotateLocal(-30, 0, 0);\n\t\ttemp.translateLocal(0, 0, 5);\n\t}\n}", "import Blackprint from \"@blackprint/sketch\";\nimport PlayCanvas from \"playcanvas\";\n\n/**\n * Get entity from scene\n * @summary PlayCanvas\n * @blackprint node\n */\n@Blackprint.registerNode(\"PlayCanvas/Scene/Get/Entity\")\nexport class Node extends Blackprint.Node<typeof Node> {\n\tstatic input = {\n\t\tApp: PlayCanvas.Application,\n\t\tName: String,\n\t};\n\tstatic output = {\n\t\tEntity: PlayCanvas.GraphNode,\n\t};\n\n\tconstructor(instance: Blackprint.Engine){\n\t\tsuper(instance);\n\n\t\tlet iface = this.setInterface();\n\t\tiface.title = \"Get Entity\";\n\t}\n\n\tupdate() {\n\t\tlet { Input, Output } = this.ref;\n\n\t\tif(!Input.Name || !Input.App) return;\n\t\tOutput.Entity = Input.App.scene.root.findByName('ball');\n\t}\n}", "import Blackprint from \"@blackprint/sketch\";\nimport PlayCanvas from \"playcanvas\";\n\n/**\n * Create Light\n * @summary PlayCanvas\n * @blackprint node\n */\n@Blackprint.registerNode(\"PlayCanvas/Scene/Light\")\nexport class Node extends Blackprint.Node<typeof Node> {\n\tstatic input = {};\n\tstatic output = {\n\t\tLight: PlayCanvas.Entity,\n\t};\n\n\tconstructor(instance: Blackprint.Engine){\n\t\tsuper(instance);\n\n\t\tlet iface = this.setInterface();\n\t\tiface.title = \"Light\";\n\t}\n\n\tinit(){\n\t\tlet temp = this.ref.Output.Light = new PlayCanvas.Entity();\n\t\ttemp.addComponent(\"light\", {\n\t\t\ttype: \"directional\",\n\t\t\tcolor: new PlayCanvas.Color(1, 1, 1),\n\t\t\tcastShadows: true,\n\t\t\tintensity: 2,\n\t\t\tshadowBias: 0.2,\n\t\t\tshadowDistance: 16,\n\t\t\tnormalOffsetBias: 0.05,\n\t\t\tshadowResolution: 2048,\n\t\t});\n\t\n\t\ttemp.setLocalEulerAngles(45, 30, 0);\n\t}\n}"],
  "mappings": "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",
  "names": ["Blackprint", "sf", "_imports_", "moduleName", "url", "loadFromURL", "engine_default", "Blackprint", "Context", "engine_default", "sketch_default", "Blackprint", "globall", "playcanvas_default", "_imports_", "Node", "sketch_default", "instance", "iface", "__publicField", "playcanvas_default", "__decorateClass", "Interface", "node", "canvas", "ev", "Output", "Context", "Node", "sketch_default", "instance", "iface", "Input", "Output", "playcanvas_default", "__publicField", "__decorateClass", "Node", "sketch_default", "instance", "iface", "Input", "Output", "playcanvas_default", "__publicField", "__decorateClass", "Node", "sketch_default", "instance", "iface", "Input", "Output", "playcanvas_default", "__publicField", "__decorateClass", "Node", "sketch_default", "instance", "iface", "Input", "__publicField", "playcanvas_default", "__decorateClass", "Node", "sketch_default", "instance", "iface", "Input", "__publicField", "playcanvas_default", "__decorateClass", "Node", "sketch_default", "instance", "iface", "Input", "__publicField", "playcanvas_default", "__decorateClass", "Node", "sketch_default", "instance", "iface", "Input", "Output", "Vector", "Max", "__publicField", "playcanvas_default", "__decorateClass", "Node", "sketch_default", "instance", "iface", "Input", "Output", "Vector", "Target", "Alpha", "temp", "__publicField", "playcanvas_default", "__decorateClass", "NodeToast", "iface", "text", "full", "temp", "ref", "Context", "toRadian", "Node", "sketch_default", "instance", "iface", "NodeToast", "Input", "Output", "vec", "Component", "Degree", "rX", "rY", "x", "y", "z", "__publicField", "playcanvas_default", "__decorateClass", "Node", "sketch_default", "instance", "iface", "temp", "playcanvas_default", "material", "__publicField", "__decorateClass", "Node", "sketch_default", "instance", "iface", "temp", "playcanvas_default", "__publicField", "__decorateClass", "Node", "sketch_default", "instance", "iface", "Input", "Output", "__publicField", "playcanvas_default", "__decorateClass", "Node", "sketch_default", "instance", "iface", "temp", "playcanvas_default", "__publicField", "__decorateClass"]
}
